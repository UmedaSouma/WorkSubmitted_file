#include "fragmentlife.h"
#include "player3D.h"
#include "fragment_manager.h"
#include "game.h"
#include "search.h"
#include "sound.h"

//========================================================================================================================
// コンストラクタ
//========================================================================================================================
CFlagmentLife::CFlagmentLife() :
	m_tag(CEnemy3D::TAG_NONE)
{
}

//========================================================================================================================
// デストラクタ
//========================================================================================================================
CFlagmentLife::~CFlagmentLife()
{
}

//========================================================================================================================
// 初期設定
//========================================================================================================================
HRESULT CFlagmentLife::Init()
{
	CParticle3D::Init();
	return S_OK;
}

//========================================================================================================================
// 終了処理
//========================================================================================================================
void CFlagmentLife::Uninit()
{
	CParticle3D::Uninit();
}

//========================================================================================================================
// 更新処理
//========================================================================================================================
void CFlagmentLife::Update()
{
	D3DXVECTOR3 move = GetMove();

	//===========================================================================================================
	// 忘れてほしくないデバッグ補足 < debugmemo >
	// ↓この下の Update と Uninit の処理の順番は変えるな
	//	逆だと Uninit された後に Update されてこのオブジェクトないよ！と言われるので注意！！
	//===========================================================================================================

	CParticle3D::Update();

	if (SearchPlayer())
	{// プレイヤーを探し、そのプレイヤーと当たったら
		CFragmentManager* pFragmentMG = CGame::GetFragmentMG();
		pFragmentMG->AddFragmentNum(m_tag);	// そのタグに付随する欠片の数を増やす

		PlaySound(SOUND_LABEL_ITEMGET_SE);

		Release();
	}

	// 慣性を付ける
	move.x += (0.0f - move.x) * 0.07f;
	move.y += (0.0f - move.y) * 0.07f;

	SetMove(move);

}

//========================================================================================================================
// 描画処理
//========================================================================================================================
void CFlagmentLife::Draw()
{
	CParticle3D::Draw();
}

//========================================================================================================================
// 生成処理
//========================================================================================================================
CFlagmentLife* CFlagmentLife::Create(D3DXVECTOR3 pos, int life,CEnemy3D::TAG_ENEMY tag)
{
	CFlagmentLife* pFragmentLife = new CFlagmentLife;

	life *= 60;	// 寿命をフレームに変換する

	pFragmentLife->SetPos(pos);
	pFragmentLife->SetLife(life);
	pFragmentLife->SetSize({ 5.0f,5.0f,5.0f });
	pFragmentLife->m_tag = tag;

	pFragmentLife->Init();

	return pFragmentLife;
}

//===========================================================================================================
// 指定された数分欠片を出す
//===========================================================================================================
void CFlagmentLife::SetNumParticle(D3DXVECTOR3 pos, int life, int num, CEnemy3D::TAG_ENEMY tag)
{
	for (int nCnt = 0; nCnt < num; nCnt++)
	{
		CFlagmentLife::Create(pos, life ,tag);
	}
}

//===========================================================================================================
// プレイヤーを探す(当たったかあたってないかを返す)
//===========================================================================================================
bool CFlagmentLife::SearchPlayer()
{
	CPlayer3D* pPlayer = nullptr;
	bool bHit = false;	// true で当たったことを示す

	pPlayer = CSearch::SearchObject(pPlayer, TYPE::PLAYER);

	// 当たり判定処理(bHit に当たったかどうかを返す)
	bHit = Collision(pPlayer->GetPos(), pPlayer->GetSize());

	return bHit;
}

//===========================================================================================================
// 当たり判定(当たったかあたってないかを示す)
//===========================================================================================================
bool CFlagmentLife::Collision(D3DXVECTOR3 pos, D3DXVECTOR3 size)
{
	D3DXVECTOR3 FragPos = GetPos();
	D3DXVECTOR3 FragSize = GetSize();

	FragSize * 0.5f;
	size * 0.5f;

	// 欠片とプレイヤーがの位置が重なったとき
	if (FragPos.x - FragSize.x <= pos.x + size.x
		&& FragPos.x + FragSize.x >= pos.x - size.x
		&& FragPos.y - FragSize.y <= pos.y + size.y
		&& FragPos.y + FragSize.y >= pos.y - size.y
		)
	{
		return true;	// 「当たった」と返す
	}

	return false;
}
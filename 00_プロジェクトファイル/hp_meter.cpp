//===========================================================================================================================================================
// 
// HPバーの処理 [hp_meter.cpp]
// Author : souma umeda
// 
//===========================================================================================================================================================
#include "hp_meter.h"
#include "search.h"
#include "player3D.h"
#include "enemy3D.h"
#include "texture.h"
#include "manager.h"
#include "slime_boss.h"

//========================================================================================================================
// コンストラクタ
//========================================================================================================================
CHpMeter::CHpMeter()
{
}

//========================================================================================================================
// デストラクタ
//========================================================================================================================
CHpMeter::~CHpMeter()
{
}

//========================================================================================================================
// 初期設定
//========================================================================================================================
HRESULT CHpMeter::Init()
{
	CUI::Init();

	int nIdx = 0;
	//CTexture* pTexData = CManager::GetTexture();
	//nIdx = pTexData->Regist("data\\TEXTURE\\ui_hitpoint.png");
	//BindTexture(pTexData->GetAddress(nIdx));

	return S_OK;
}

//========================================================================================================================
// 終了処理
//========================================================================================================================
void CHpMeter::Uninit()
{
	CUI::Uninit();
}

//========================================================================================================================
// 更新処理
//========================================================================================================================
void CHpMeter::Update()
{
	float fRatio = 0.0f;

	//===========================================================================================================
	// < debugmemo >
	// ここの処理をもっと関数で分割する
	// HPの管理をプレイヤーやボスにもたせる
	//===========================================================================================================

	
	if (m_CharType == TYPE::PLAYER)
	{// 持ち主がプレイヤーだったら

		// プレイヤーのポインタを取得
		CPlayer3D* pPlayer = nullptr;
		pPlayer = CSearch::SearchObject(pPlayer, TYPE::PLAYER);

		// バーのタイプに合わせて更新処理を変える
		switch (m_hptype)
		{
			// 不変の時
		case HP_LITERAL:
			SetColor({ 0.5f,0.5f,0.5f,1.0f });	// 灰色
			break;

			// 可変の時
		case HP_VARIABLE:

			SetColor({ 0.0f,1.0f,0.0f,1.0f });	// 緑

			if (pPlayer != nullptr)
			{// プレイヤーが存在していたら

				// 現在HPの割合を求める
				float life = (float)pPlayer->GetLife();	// 現在HP取得
				float Maxlife = (float)pPlayer->GetMaxLife();	// 最大HP取得
				fRatio = life / Maxlife;	// 割合

				// 割合を設定
				SetHPratio(fRatio);
			}
			break;
		}
	}
	else if (m_CharType == TYPE::ENEMY_BOSS)
	{// 持ち主がボスだったら

		// ボスの取得
		CSlimeBoss* pBoss = nullptr;
		pBoss = CSearch::SearchObject(pBoss, TYPE::ENEMY_BOSS);

		// バーのタイプに合わせて更新処理を変える
		switch (m_hptype)
		{
			// 不変の時
		case HP_LITERAL:
			SetColor({ 0.5f,0.5f,0.5f,1.0f });
			break;

			// 可変の時
		case HP_VARIABLE:
			SetColor({ 1.0f,0.0f,0.0f,1.0f });

			if (pBoss != nullptr)
			{// ボスが存在していたら

				// 現在HPの割合を求める
				float life = (float)pBoss->GetLife();	// 現在HP取得
				float Maxlife = (float)pBoss->GetMaxLife();	// 最大HP取得
				fRatio = life / Maxlife;	// 割合

				SetHPratio(fRatio);
			}
			break;
		}
	}

	

	CUI::Update();
}

//========================================================================================================================
// 描画処理
//========================================================================================================================
void CHpMeter::Draw()
{
	CUI::Draw();
}

//========================================================================================================================
// 生成処理
//========================================================================================================================
CHpMeter* CHpMeter::Create(D3DXVECTOR3 pos, D3DXVECTOR3 size,HP_TYPE type, TYPE chartype)
{
	CHpMeter* pHpMeter = new CHpMeter;
	pHpMeter->SetbHP(true);
	pHpMeter->SetPos(pos);
	pHpMeter->SetSize(size);
	pHpMeter->m_hptype = type;
	pHpMeter->m_CharType = chartype;

	pHpMeter->Init();

	return pHpMeter;
}

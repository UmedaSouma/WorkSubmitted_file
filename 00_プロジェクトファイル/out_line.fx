//===========================================================================================================
// 
// アウトラインシェーダー(引き伸ばしモデルによるエッジ抽出)
// Aouther : Umeda Souma
// 
//===========================================================================================================

//==========================================================================
// グローバル宣言
//==========================================================================
float4x4 matWVP;	// ワールドビュー射影変換行列宣言
struct VS_OUTPUT
{
	float4 Pos;
	float4 Color;
};

//==========================================================================
// 頂点シェーダ
//==========================================================================
float4 BasicTransform(float4 LocalPos : POSITION) : POSITION
{
    // ローカル座標にある頂点をワールドビュー射影変換で
    // 一気にスクリーン座標にしてしまう
    return mul(LocalPos, matWVP);
}

//======================================================================
// 輪郭描画頂点シェーダー
//======================================================================
VS_OUTPUT VS_Edge(
	float4 Pos :	POSITION,	// モデルの頂点
	float4 Normal : NORMAL,		// 法線ベクトル
	float4 Tex0 : TEXCOORD0		// テクスチャ頂点
)
{
	VS_OUTPUT Out = (VS_OUTPUT)0;	// 出力データ

	float4 pos = mul(Pos, matWVP);

	float4 n = mul(Normal, matWVP);
	n.zw = 0;

	Out.Pos = pos + 0.02f * n;

	Out.Color = 0;

	return Out;
}

//======================================================================
// ピクセルシェーダ
//======================================================================
float4 NoWorkingPixelShader(float4 ScreenColor : COLOR0) : COLOR0
{
	// 入力されたスクリーンピクセルの色をそのままスルー
	return ScreenColor;
}

//======================================================================
// テクニック宣言
//======================================================================
technique Tec
{
	pass P0
	{
		VertexShader = compile vs_2_0 BasicTransform();
		//PixelShader = compile vs_2_0 NoWorkingPixelShader();
	}
	//pass P1
	//{
	//	VertexShader = compile vs_2_0 a;
	//}
};
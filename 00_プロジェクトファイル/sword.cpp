//===========================================================================================================================================================
// 
// 剣の処理 [sword.cpp]
// Author : souma umeda
// 
//===========================================================================================================================================================
#include "sword.h"
#include "manager.h"
#include "sound.h"

//========================================================================================================================
// コンストラクタ
//========================================================================================================================
CSword::CSword() :
	m_Targetrot{ 0.0f,0.0f,0.0f }
	, m_Moverot{ 0.0f,0.0f,0.0f }
	, m_TargetFrame(0)
	, m_FrameCnt(0)
{
}

//========================================================================================================================
// デストラクタ
//========================================================================================================================
CSword::~CSword()
{
}

//========================================================================================================================
// 初期設定
//========================================================================================================================
HRESULT CSword::Init()
{
	CModel::Init();

	// モデルの設定
	SetModelAddress("data\\model\\item_sword_002.x");		// アドレスを保存しておく
	CModeldata* pModeldata = CManager::GetModeldata();	// modeldata のポインタを持ってくる
	int nIdx = pModeldata->Regist(GetModelAddress());	// モデルデータの登録
	BindModel(pModeldata->GetAddress(nIdx));			// モデル情報をセットする

	return S_OK;
}

//========================================================================================================================
// 終了処理
//========================================================================================================================
void CSword::Uninit()
{
	CModel::Uninit();
}

//========================================================================================================================
// 更新処理
//========================================================================================================================
void CSword::Update()
{
	UpdateRot();

	CModel::Update();
}

//========================================================================================================================
// 描画処理
//========================================================================================================================
void CSword::Draw()
{
	CModel::Draw();
}

//========================================================================================================================
// 生成処理
//========================================================================================================================
CSword* CSword::Create(D3DXVECTOR3 pos)
{
	CSword* pSword = new CSword;
	pSword->SetPos(pos);
	pSword->SetType(TYPE::SWORD);

	pSword->Init();

	return pSword;
}

//===========================================================================================================
// 角度の更新
//===========================================================================================================
void CSword::UpdateRot()
{
	D3DXVECTOR3 rot = GetRot();

	if (0 >= m_FrameCnt)
	{
		SetRot({ 0.0f,0.0f,0.0f });
	}

	if (0 < m_FrameCnt)
	{
		rot -= m_Moverot;
		m_FrameCnt--;
		SetRot(rot);
	}
}

//===========================================================================================================
// 親の位置設定
//===========================================================================================================
void CSword::TargetPos(D3DXVECTOR3 pos)
{
	SetPos(pos);
}

//===========================================================================================================
// 目標の角度設定
//===========================================================================================================
void CSword::TargetRot(D3DXVECTOR3 rot, int frame)
{
	D3DXVECTOR3 diffrot = { 0.0f,0.0f,0.0f };

	if (GetRot() == D3DXVECTOR3(0.0f, 0.0f, 0.0f))
	{
		m_Targetrot = rot;

		diffrot = m_Targetrot - GetRot();	// 目標と現在の差分を求める
		m_Moverot = diffrot / frame;	// 差分とフレーム数を乗算して移動量を設定する
		m_FrameCnt = frame;

		PlaySound(SOUND_LABEL_SWORD_SE);
	}
}